using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// OpenCV 사용을 위한 using
using OpenCvSharp;
using OpenCvSharp.WpfExtensions;

// Timer 사용을 위한 using
using System.Windows.Threading;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            VideoCapture cam, cam1;
            Mat frame;
            DispatcherTimer timer;
            bool is_initCam, is_initTimer;
            //public MainWindow()
            //{
            //    InitializeComponent();
            //}
            private void windows_loaded(object sender, RoutedEventArgs e)
            {
                // 카메라, 타이머(0.01ms 간격) 초기화
                is_initCam = init_camera();
                is_initTimer = init_Timer(0.01);

                // 초기화 완료면 타이머 실행
                if (is_initTimer && is_initCam) timer.Start();
            }

            private bool init_Timer(double interval_ms)
            {
                try
                {
                    timer = new DispatcherTimer();

                    timer.Interval = TimeSpan.FromMilliseconds(interval_ms);
                    timer.Tick += new EventHandler(timer_tick);

                    return true;
                }
                catch
                {
                    return false;
                }
            }

            private bool init_camera()
            {
                try
                {
                    // 0번 카메라로 VideoCapture 생성 (카메라가 없으면 안됨)
                    cam = new VideoCapture(0);
                    cam.FrameHeight = (int)Cam_1.Height;
                    cam.FrameWidth = (int)Cam_1.Width;

                    // 카메라 영상을 담을 Mat 변수 생성
                    frame = new Mat();

                    cam1 = new VideoCapture(0);
                    cam1.FrameHeight = (int)Cam_2.Height;
                    cam1.FrameWidth = (int)Cam_2.Width;

                    // 카메라 영상을 담을 Mat 변수 생성
                    frame = new Mat();

                    return true;
                }
                catch
                {
                    return false;
                }
            }

            private void timer_tick(object sender, EventArgs e)
            {
                // 0번 장비로 생성된 VideoCapture 객체에서 frame을 읽어옴
                cam.Read(frame);
                //cam.Read(frame1);
                // 읽어온 Mat 데이터를 Bitmap 데이터로 변경 후 컨트롤에 그려줌
                Cam_1.Source = WriteableBitmapConverter.ToWriteableBitmap(frame);

                //converting color space to HSV
                Mat hsv = new Mat();
                Cv2.CvtColor(frame, hsv, ColorConversionCodes.BGR2HSV);//원본 이미지, 결과이미지, 색상변환 코드


                //color thresholding - red
                Mat red = new Mat();
                Cv2.InRange(hsv, new Scalar(0, 100, 100), new Scalar(30 / 2, 255, 255), red);//빨강
                                                                                             //Cv2.InRange(hsv, new Scalar(50, 150, 0), new Scalar(160 / 2, 255, 255), red);//녹색
                                                                                             //Cv2.InRange(hsv, new Scalar(90, 100, 100), new Scalar(250 / 2, 255, 255), red);//파랑
                                                                                             //Cv2.InRange(hsv, new Scalar(20, 100, 100), new Scalar(70/2, 255, 255), red);//노랑

                //noise reduce
                Cv2.GaussianBlur(red, red, new OpenCvSharp.Size(5, 5), 2, 2);

                Mat str_el = Cv2.GetStructuringElement(MorphShapes.Rect, new OpenCvSharp.Size(3, 3));
                Cv2.MorphologyEx(red, red, MorphTypes.Open, str_el);
                Cv2.MorphologyEx(red, red, MorphTypes.Close, str_el);


                //find contours
                OpenCvSharp.Point[][] contours;
                HierarchyIndex[] hierarchyIndexes;
                Cv2.FindContours(
                    red,
                    out contours,
                    out hierarchyIndexes,
                    mode: RetrievalModes.External,
                    method: ContourApproximationModes.ApproxSimple);

                //drawing contours
                if (contours.Length == 0)
                {
                    MessageBox.Show("Couldn't find any object in the image.");
                }
                else
                {
                    //draw contours - default all
                    Cv2.DrawContours(frame, contours, -1, Scalar.Blue, 2);

                    //display option
                    string msg = "Found contours : [" + contours.Length.ToString() + "]";
                    Cv2.PutText(frame, msg, new OpenCvSharp.Point(5, 35), HersheyFonts.HersheyComplex, 1.0, Scalar.Red, 1, LineTypes.AntiAlias);
                    //MessageBox.Show()
                }
                //Mat res = new Mat();
                Cam_2.Source = WriteableBitmapConverter.ToWriteableBitmap(frame);
            }
        }
    }
}    
